day1: 
JavaScript Drum Kit
使用document.querySelector
使用classList.add 及 classList.remove 配合transition

document.querySelector(`audio[data-key=${e.keyCode}]`)
key.classList.add("playing");
this.classList.remove("playing");


day2:
JS and CSS Clock
使用.style 改變 style 屬性,
使用setInterval 定時執行function 

document.querySelector(".second-hand").style.transform = `rotate(${seconds_deg}deg)`;
setInterval(setDate, 1000);

day3:
初次使用CSS Variables

         :root {
            --spacing: 10px;
            --blur: 10px;
            --base: #ffc600;
        }
        
        img {
            padding: var(--spacing);
            background: var(--base);
            filter: blur( var(--blur));
        }

const suffix = this.dataset.sizing || '';
document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix);

day4:
使用Array function

const totalYears = inventors.reduce((total, inventor) => total + inventor.passed - inventor.year, 0);

const sum = data.reduce((obj, item) => {
    if (!obj[item]) {
        obj[item] = 0;
    }
    obj[item]++;
    return obj;
}, {});

發現第一種寫法會return 第一句,而第二種寫法需添加return
研究了javascript object 寫法及ES5 與ES6 的差別

day5: 
練習css flex 
flex: 1;
justify-content: center;
align-items: center;
display: flex;
flex-direction: column;

items.forEach(item => item.addEventListener('transitionend', toggleOpenActive));
有機會有數種transitionend 同時發生，導致toggle 失效

day6:
使用web api 
fetch(endpoint)
    .then(blob => blob.json())
    .then(data => cities.push(...data))
重溫array method
Regular Expression
function numWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

day7:
Array method 2
console.log(people.some(person => (2020 - person.year) >= 19));
console.log(people.every(person => (2020 - person.year) >= 19));
console.log(comments.find(comment => (comment.id === 823423)).text);
const index = comments.findIndex(comment => (comment.id === 823423));
comments.splice(index, 1)

day8:
html canvas

            ctx.beginPath();
            //start
            ctx.moveTo(lastX, lastY);
            //to
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.stroke();

offset x,y 是scr element 相應x,y

day9:
console 應用

console.assert(false, 'this is wrong');
只有condition = false 才會print 後面的string

計時
        console.time('fetching data');
        fetch('https://api.github.com/users/wesbos')
            .then(data => data.json())
            .then(data => {

                console.timeEnd('fetching data');
                console.log(data);
            });

day10:
checkbox應用
注意query selector syntax
const checkboxes = document.querySelectorAll('.inbox input[type="checkbox"]');
檢查undefined
condition:  true || false && false = true
            (true || false) && false = false

                    if ((checkbox === this || checkbox === lastCheckedbox) && lastCheckedbox !== undefined) {
                        inbetween = !inbetween;

                    }

day11:
html video player
querySelector 用法
const ranges = document.querySelectorAll('input[type="range"]');
const skips = document.querySelectorAll('[data-skip]');
學習video player API
        viewer.play();
        viewer.pause();
注意click progress bar 和 mousedown flag 的logic
let editProgress = false;
progress.addEventListener('mousedown', (e) => {
    editProgress = true;
    updateTime(e);
});

day12:
處理array
array.splice(start[, deleteCount[, item1[, item2[, ...]]]])
keyArray.splice(-secretCode.length - 1, keyArray.length - secretCode.length);

day13:
scroll slide in/out
利用window.scrollY 和 image.offsetY 判斷 slide in/ out
const slideInAt = (window.scrollY + window.innerHeight);
if (isHalfShown && isNotScrolledPast) {
    slideImage.classList.add('active');
}

day14:
Shallow copy, deep copy
類似pointer的概念
以下方法new object/array 會指向original object/array 的 memory address, 修改新的會同時影響原來的
const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];
const team = players;

解決方法: deep copy
const team2 = players.slice();
const team3 = [].concat(players);
const team4 = [...players];
const team5 = Array.from(players);
然而以上方法只能做一層deep copy, 如果object 裡有object/ array 方法會失效
可以將obj換成json再換回來, 只限json obj, method/function 會失效
var obj2 = JSON.parse(JSON.stringify(obj1));
或使用jquery $.extend or lodash library 

day15:
localstorage
const items = JSON.parse(localStorage.getItem('items')) || [];
localStorage.setItem('items', JSON.stringify(items));
以JSON 格式儲存,以JSON 格式讀取

day16:
Mouse Shadow
<h1 contenteditable>🔥WOAH!</h1>
contenteditable 表示可否被用戶編輯
text-shadow: 50px 50px 0 rgba(0, 0, 0, 0.7);
text-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit;
不同的varible定義寫法
// const width = hero.offsetWidth;
// const height = hero.offsetHeight;
const {
    offsetWidth: width,
    offsetHeight: height
} = hero;

day17:
sort without articles
function strip(bandName) {
    return bandName.replace(/^(a |an |the )/i, '').trim();
}

day18:
Adding Up Times with Reduce
const timeNodes = Array.from(document.querySelectorAll('[data-time]'));
const [mins, secs] = timeCode.split(':').map(parseFloat);
將nodes 轉成array,
將string轉成float

day19:
webcam
navigator.mediaDevices.getUserMedia({ video: true, audio: false })
    .then(localMediaStream => {
      video.srcObject = localMediaStream;
      video.play();
    })
    .catch(err => {
      console.error(`OH NO!!!`, err);
    });

        ctx.drawImage(video, 0, 0, width, height);
    // take the pixels out
    let pixels = ctx.getImageData(0, 0, width, height);
    通過修改pixels 製造filter效果, pixels = rgba format

day20:
Speech Detection
使用web speech api
  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

  const recognition = new SpeechRecognition();
  recognition.interimResults = true;
  recognition.lang = 'en-US';
  recognition.start();
https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition

day21:
Geolocation 
navigator.geolocation.watchPosition((data) => {
      console.log(data);
      speed.textContent = data.coords.speed;
      arrow.style.transform = `rotate(${data.coords.heading}deg)`;
    }, (err) => {
      console.error(err);
    });
使用Geolocation api
https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API

day22:
Follow Along Link
造一個新element, 改變大小及位置做出highlight 效果
        const highlight = document.createElement('span');
        highlight.classList.add('highlight');
        document.body.appendChild(highlight);
取得this的Rect位置及大小
const linkCoords = this.getBoundingClientRect();
注意要加上px
highlight.style.height = `${coords.height}px`;

day23:
SpeechSynthesis
const msg = new SpeechSynthesisUtterance();

        function toggle(startOver = true) {
            speechSynthesis.cancel();
            if (startOver) {
                speechSynthesis.speak(msg);
            }
        }
        stopButton.addEventListener('click', () => toggle(false));
    
使用SpeechSynthesis api
https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis

day24:
Sticky Nav
監聽scroll, fix nav 
window.addEventListener('scroll', fixNav);
body.fixed-nav nav {
    position: fixed;
    box-shadow: 0 5px 0 rgba(0, 0, 0, 0.1);
}

day25:
Event Capture, Propagation, Bubbling and Once
理解js event 處理程序, 及我們可以對其做的控制
key: 1.先捕獲，再冒泡
     2.當事件傳到 target 本身，沒有分捕獲跟冒泡
取消事件傳遞: e.stopPropagation();
參考: https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/

day26:
Follow Along Nav
類似day24,
1. 用queryselector取得elements
2. 加入event listener 
3. 完成function : 用class list add/ remove 做出fade in/out 效果, display block & opcity : 1 
4. 改變bg block  大小/ 位移 / fade in/out :
    background.style.setProperty('width', `${coords.width}px`);
    background.style.setProperty('height', `${coords.height}px`);
    background.style.setProperty('transform', `translate(${coords.left}px, ${coords.top}px)`);
5. set time out : delay 後執行 , 做出先後效果
參考: https://blog.camel2243.com/2016/08/06/javascript-%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-settimeout-%E8%88%87-setinterval-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E8%99%95/


day27:
Click and Drag
startX = e.pageX - slider.offsetLeft; 
scrollLeft = slider.scrollLeft;
startX是mouse click該element的坐標 ( 非viewport坐標 )
scrollLeft 是已經scroll過的X坐標數值 

題外:
//-ms代表【ie】内核识别码
//-moz代表火狐【firefox】内核识别码
//-webkit代表谷歌【chrome】/苹果【safari】内核识别码
//-o代表欧朋【opera】内核识别码
为什么要加识别码：
在标准还未确定时，部分浏览器已经根据最初草案实现了部分功能，为了与之后确定下来的标准进行兼容，所以每种浏览器使用了自己的私有前缀与标准进行区分，当标准确立后，各大浏览器将逐步支持不带前缀的css3新属性。
目前已有很多私有前缀可以不写了，但为了兼容老版本的浏览器，可以仍沿用私有前缀和标准方法，逐渐过渡。
參考: https://www.cnblogs.com/EasonJim/p/6140097.html

day28:
Video Speed Controller UI
類似day11 html video player
const y = e.pageY - this.offsetTop;
可以使用
const y = e.offsetY;

day29:
Countdown Timer
運用Date api & setinterval 
e.preventDefault();
取消browser Default 行動
參考: https://developer.mozilla.org/zh-TW/docs/Web/API/Event/preventDefault

day30:
Whack-a-mole!
打地鼠, 主要使用RANDOM function
Math.random()
e.isTrusted : 防作弊
Event 介面的 isTrusted 唯讀屬性為一個布林值，
若事件物件是由使用者操作而產生，則 isTrusted 值為 true。
若事件物件是由程式碼所建立、修改，或是透過 EventTarget.dispatchEvent() 來觸發，則 isTrusted 值為 false。
參考: https://developer.mozilla.org/zh-TW/docs/Web/API/Event/isTrusted